Index: quilted/Include/Python.h
===================================================================
--- quilted.orig/Include/Python.h	2006-06-10 13:23:46.000000000 +0100
+++ quilted/Include/Python.h	2008-09-04 15:57:24.000000000 +0100
@@ -162,7 +162,7 @@
 #endif
 
 /* Define macros for inline documentation. */
-#define PyDoc_VAR(name) static char name[]
+#define PyDoc_VAR(name) static const char name[]
 #define PyDoc_STRVAR(name,str) PyDoc_VAR(name) = PyDoc_STR(str)
 #ifdef WITH_DOC_STRINGS
 #define PyDoc_STR(str) str
Index: quilted/Objects/longobject.c
===================================================================
--- quilted.orig/Objects/longobject.c	2007-05-07 19:30:48.000000000 +0100
+++ quilted/Objects/longobject.c	2008-09-04 15:57:24.000000000 +0100
@@ -1340,7 +1340,7 @@
  * Note that when converting a base B string, a char c is a legitimate
  * base B digit iff _PyLong_DigitValue[Py_CHARMASK(c)] < B.
  */
-int _PyLong_DigitValue[256] = {
+const int _PyLong_DigitValue[256] = {
 	37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
 	37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
 	37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
Index: quilted/Python/getcopyright.c
===================================================================
--- quilted.orig/Python/getcopyright.c	2008-02-21 11:53:40.000000000 +0000
+++ quilted/Python/getcopyright.c	2008-09-04 15:57:24.000000000 +0100
@@ -2,7 +2,7 @@
 
 #include "Python.h"
 
-static char cprt[] = 
+static const char cprt[] = 
 "\
 Copyright (c) 2001-2008 Python Software Foundation.\n\
 All Rights Reserved.\n\
Index: quilted/Include/longobject.h
===================================================================
--- quilted.orig/Include/longobject.h	2006-05-25 18:34:03.000000000 +0100
+++ quilted/Include/longobject.h	2008-09-04 15:57:24.000000000 +0100
@@ -25,7 +25,7 @@
 PyAPI_FUNC(Py_ssize_t) _PyLong_AsSsize_t(PyObject *);
 PyAPI_FUNC(PyObject *) _PyLong_FromSize_t(size_t);
 PyAPI_FUNC(PyObject *) _PyLong_FromSsize_t(Py_ssize_t);
-PyAPI_DATA(int) _PyLong_DigitValue[256];
+PyAPI_DATA(const int) _PyLong_DigitValue[256];
 
 /* _PyLong_AsScaledDouble returns a double x and an exponent e such that
    the true value is approximately equal to x * 2**(SHIFT*e).  e is >= 0.
Index: quilted/Include/token.h
===================================================================
--- quilted.orig/Include/token.h	2008-09-04 16:09:21.000000000 +0100
+++ quilted/Include/token.h	2008-09-04 16:09:30.000000000 +0100
@@ -72,7 +72,7 @@
 #define ISEOF(x)		((x) == ENDMARKER)
 
 
-PyAPI_DATA(char *) _PyParser_TokenNames[]; /* Token names */
+PyAPI_DATA(const char *) _PyParser_TokenNames[]; /* Token names */
 PyAPI_FUNC(int) PyToken_OneChar(int);
 PyAPI_FUNC(int) PyToken_TwoChars(int, int);
 PyAPI_FUNC(int) PyToken_ThreeChars(int, int, int);
Index: quilted/Parser/tokenizer.c
===================================================================
--- quilted.orig/Parser/tokenizer.c	2008-09-04 16:08:59.000000000 +0100
+++ quilted/Parser/tokenizer.c	2008-09-04 16:09:09.000000000 +0100
@@ -41,7 +41,7 @@
 
 /* Token names */
 
-char *_PyParser_TokenNames[] = {
+const char *_PyParser_TokenNames[] = {
 	"ENDMARKER",
 	"NAME",
 	"NUMBER",
Index: quilted/Include/grammar.h
===================================================================
--- quilted.orig/Include/grammar.h	2008-09-04 16:18:31.000000000 +0100
+++ quilted/Include/grammar.h	2008-09-04 16:18:57.000000000 +0100
@@ -76,7 +76,7 @@
 
 int addlabel(labellist *ll, int type, char *str);
 int findlabel(labellist *ll, int type, char *str);
-char *PyGrammar_LabelRepr(label *lb);
+const char *PyGrammar_LabelRepr(label *lb);
 void translatelabels(grammar *g);
 
 void addfirstsets(grammar *g);
Index: quilted/Parser/grammar1.c
===================================================================
--- quilted.orig/Parser/grammar1.c	2008-09-04 16:18:02.000000000 +0100
+++ quilted/Parser/grammar1.c	2008-09-04 16:18:19.000000000 +0100
@@ -30,7 +30,7 @@
 #endif
 }
 
-char *
+const char *
 PyGrammar_LabelRepr(label *lb)
 {
 	static char buf[100];
