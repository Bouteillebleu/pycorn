include common.mk
include $(ROOT)/libs/embryo/embryo.mk

TARGET := libpython$(PYTHONVERMINOR).a

ifndef USE_BINARIES
$(phony all): $(TARGET) stamp-include stamp-frozen stamp-initrd
else
$(phony all): stamp-frozen stamp-initrd
endif

$(TARGET): stamp-target
	cp -p build/$(output) $(output)

FREEZEMODS := struct.py
INITRDMODS := __future__.py

stamp-initrd: stamp-sources
	rm -rf initrd
	&mkdir initrd
	cd Python-$(PYTHONVER)/Lib && cp -p --parents $(INITRDMODS) ../../initrd
	&touch stamp-initrd

stamp-frozen: stamp-sources
	rm -rf frozen
	&mkdir frozen
	cd Python-$(PYTHONVER)/Lib && cp -p --parents $(FREEZEMODS) ../../frozen
	&touch stamp-frozen

stamp-include: stamp-target stamp-sources
	rm -rf include
	&mkdir include
	cp -p Python-$(PYTHONVER)/Include/*.h include
	cp -p build/pyconfig.h include
	&touch stamp-include

stamp-target: stamp-sources $(LDDEPS)
	rm -rf build
	&mkdir build
	cd build; MACHDEP=pycorn CFLAGS="$(LDFLAGS)" ../Python-$(PYTHONVER)/configure --host=arm-eabi --without-signal-module
	cd build; make HOSTPGEN=$(findfile hostpgen) EXTRA_CFLAGS="$(PYCFLAGS)" $(TARGET)
	&touch stamp-target

stamp-quilt: $(ROOT)/downloads/Python-$(PYTHONVER).tar.bz2
	rm -rf quilt
	&mkdir quilt
	cd quilt; tar jxf ../$(input)
	&ln -s ../../patches quilt/Python-$(PYTHONVER)
	cd quilt/Python-$(PYTHONVER); quilt push -a
	&touch $(output)

ifndef USE_BINARIES
stamp-sources Python-$(PYTHONVER)/configure: $(ROOT)/downloads/Python-$(PYTHONVER).tar.bz2 patches/*
	rm -rf Python-$(PYTHONVER)
	tar jxf $(input)
	cd Python-$(PYTHONVER); for p in `cat ../patches/series`; do patch -p1 < ../patches/$$p; done
	cd Python-$(PYTHONVER); autoconf
	&touch $(output)
else
stamp-sources: $(ROOT)/downloads/Python-$(PYTHONVER).tar.bz2
	rm -rf Python-$(PYTHONVER)
	tar jxf $(input)
	&touch $(output)
endif

no_implicit_load Python-$(PYTHONVER) build
