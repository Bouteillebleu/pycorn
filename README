Well, this is Pycorn.

LICENSE
=======

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

The directory 'makepp' is a verbatim copy of the original makepp source,
distributed here for convenience. makepp has its own licensing terms in
makepp/LICENSE.

HOW IT ALL FITS TOGETHER
========================

Pycorn currently uses devkitARM to build python, part of wintermute's excellent
devkitpro project (http://www.devkitpro.org/). devkitARM includes a
cross-compiling gcc targetted at generic ARM platforms, a build of the newlib
embedded C library, and wintermute's libsysbase file IO abstraction library.
This provides enough 'stuff' to compile the python interpreter into a library.

To actually make a bootable image a linkscript and crt0 are required which are
implemented by pycorn. These are platform specific: the link script currently
uses physical addresses and thus must be adjusted per target, and the crt0 is
written in assembly to do things like stack setup. Right now we only have them
for Marvell's PXA270 system-on-chip, as used in the Gumstix Verdex development
board (http://www.gumstix.com). This board can be simulated by QEMU. A main
program entry point is also required which invokes the python interpreter with
some arguments, and though this is written in C it is portable.

Of course, it won't actually do anything visible; newlib has no actual IO
facilities. A platform-specific serial driver is used for now, hooked up to
libsysbase's stdin/stdout/stderr handles.

And.. that's it for now. There is no way to import any modules which aren't
built into the interpreter as all file access fails right now, and Python's
builtin readline is really stupid so you can't even backspace.. but it works!

BUILDING
========

0) Download devkitARM from
http://sourceforge.net/project/showfiles.php?group_id=114505&package_id=124207
and unpack it somewhere. Add devkitARM/bin to your PATH. You should now be able
to run arm-eabi-gcc and friends.

1) Add the makepp directory in the pycorn source tree to your PATH. makepp is a
nice make replacement with lots of nifty features; used primarily because I
hate make's handling of subdirectories. See http://makepp.sourceforge.net/ for
their project page.

2) Install u-boot's mkimage utility. This is in Debian as package
"uboot-mkimage", or you can compile it from u-boot's source.

3) Install autoconf. Python's configure script needs regeneration after
patching.

4) Run "makepp hello/hello.uimage". This is a "hello world" program which
should load into u-boot and print on the default platform serial port.

5a) If you have an actual Gumstix Verdex board you should be able to load this
by serial, tftp, or MMC, and execute it with bootm.

5b) If you don't, you can simulate it under QEMU by doing "makepp hello/run",
assuming you have QEMU installed. The bootloader will be configured
automatically so it should just run. Hit C-a x (C-a a x under screen) to kill
QEMU.

6) Run "makepp pykern/pykern.uimage". This is the python interpreter as a
kernel.

7a) Again, if you have an actual Verdex board it should run from u-boot.

7b) Otherwise, "makepp pykern/run" to launch it in QEMU.
